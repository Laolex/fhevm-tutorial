name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run test -- --coverage
        continue-on-error: true

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Solidity linter
        run: npx solhint 'contracts/**/*.sol'
        continue-on-error: true

      - name: Check TypeScript types
        run: npx tsc --noEmit
        continue-on-error: true

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Type check frontend
        run: |
          cd frontend
          npm run type-check
        continue-on-error: true

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Slither (Solidity Static Analyzer)
        uses: crytic/slither-action@v0.3.0
        continue-on-error: true
        with:
          target: 'contracts/'
          slither-args: '--filter-paths "node_modules" --exclude naming-convention,solc-version'

  deploy-test:
    name: Test Deployment Scripts
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Validate deployment scripts
        run: |
          echo "Checking deployment scripts exist..."
          ls -la scripts/
          test -f scripts/deploy-game-master.ts || exit 1

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm test
        env:
          NODE_ENV: test

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, lint, frontend-test, security, deploy-test, integration]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "All CI checks completed"
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed"
            exit 1
          fi
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "Linting had issues (non-blocking)"
          fi
          if [ "${{ needs.frontend-test.result }}" != "success" ]; then
            echo "Frontend tests failed"
            exit 1
          fi
          echo "Build successful!"
